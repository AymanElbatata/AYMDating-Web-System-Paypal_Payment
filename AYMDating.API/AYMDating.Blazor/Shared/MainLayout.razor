@inherits LayoutComponentBase

@using AYMDating.API.DTO
@using AYMDating.Blazor.Data.Helpers
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ApiServiceLogin _apiServiceLogin
@inject NavigationManager Navigation
@inject JsInteropService JsInterop
@inject AppState _AppState

<PageTitle>AYM Dating</PageTitle>
<style>
    .dropdown-menu {
        display: none;
        position: absolute;
        background-color: white;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        z-index: 1;
    }

        .dropdown-menu a {
            display: block;
            padding: 6px 8px;
            text-decoration: none;
            color: black;
        }

            .dropdown-menu a:hover {
                background-color: #f1f1f1;
            }

        /* Show the dropdown */
        .dropdown-menu.show {
            display: block;
        }

        /* Hide the dropdown */
        .dropdown-menu.hide {
            display: none;
        }

    .imagelogo{
        width:10%;
        height:5%;
    }
</style>

<div class="page">
    @if (_AppState.isAuthenticated)
    {
        <div class="sidebar">
            <NavMenu />
        </div>

        <main>
            <div class="top-row px-4 d-flex justify-content-between">
                <div>
                <span @onclick="NavigateToComponent8">Online</span>
                </div>
                <div class="position-relative">
                    <span @onclick="ToggleDropdown2">Search</span>
                    <div class="dropdown-menu @(isDropdownVisible2 ? "show" : "hide")">
                        <a @onclick="NavigateToComponent6">Match</a>
                        <a @onclick="NavigateToComponent7">Search</a>
                    </div>
                </div>
                <div>
                <span @onclick="NavigateToComponent1">Message(@(_AppState.CurrentUserHistoryDTO.AppUserId != null ? _AppState.CurrentUserHistoryDTO.CounterOfNewMessages : 0))</span>
                </div>
                <div class="position-relative">
                    <span @onclick="ToggleDropdown1">Activity(@(_AppState.CurrentUserHistoryDTO.CounterOfNewLikes + _AppState.CurrentUserHistoryDTO.CounterOfNewFavorites + _AppState.CurrentUserHistoryDTO.CounterOfNewViews + _AppState.CurrentUserHistoryDTO.CounterOfNewBlocks))</span>
                    <div class="dropdown-menu @(isDropdownVisible1 ? "show" : "hide")">
                        <a @onclick="NavigateToComponent2">Likes (@(_AppState.CurrentUserHistoryDTO.AppUserId != null ? _AppState.CurrentUserHistoryDTO.CounterOfNewLikes : 0))</a>
                        <a @onclick="NavigateToComponent3">Favorites (@(_AppState.CurrentUserHistoryDTO.AppUserId != null ? _AppState.CurrentUserHistoryDTO.CounterOfNewFavorites : 0))</a>
                        <a @onclick="NavigateToComponent4">Profile Views (@(_AppState.CurrentUserHistoryDTO.AppUserId != null ? _AppState.CurrentUserHistoryDTO.CounterOfNewViews : 0))</a>
                        <a @onclick="NavigateToComponent5">Block List (@(_AppState.CurrentUserHistoryDTO.AppUserId != null ? _AppState.CurrentUserHistoryDTO.CounterOfNewBlocks : 0))</a>
                    </div>
                </div>
                <div>
                    <NavLink class="nav-link" href="memberShips">
                        <span class="oi oi-move" aria-hidden="true"></span> MemberShips
                    </NavLink>
                </div>


                <div class="d-flex align-items-center justify-content-between">
                <NavLink class="nav-link" href="logOut">
                    <span class="oi oi-account-logout" aria-hidden="true"></span> LogOut
                </NavLink>
                    <div>
                    <span>Hello: @(_AppState.CurrentUserHistoryDTO.AppUserId != null ? _AppState.CurrentUserHistoryDTO.AppUser.UserName : 0)</span>
                    </div>
                </div>
            </div>


@*             <article class="content px-4 maincoverphoto">
 *@            <article class="content px-4">
                @Body
            </article>
        </main>
    }
    else
    {

@*         <main>
            <div class="d-flex justify-content-start px-4">
                <img src="css/Images/Default/logo.png" class="img-fluid imagelogo"/>
            </div>
            <div class="d-flex justify-content-end px-4">
                <NavLink class="nav-link" href="login">
                    <span class="oi oi-account-login" aria-hidden="true"></span> Login
                </NavLink>
                <NavLink class="nav-link" href="register">
                    <span class="oi oi-brush" aria-hidden="true"></span> Register
                </NavLink>
                <NavLink class="nav-link" href="activateAcAgain">
                    <span class="oi oi-action-redo" aria-hidden="true"></span> Activation
                </NavLink>
                <NavLink class="nav-link" href="forgotPassword">
                    <span class="oi oi-reload" aria-hidden="true"></span> Forgot Password
                </NavLink>           
                 <NavLink class="nav-link" href="contactUs">
                    <span class="oi oi-contrast" aria-hidden="true"></span> Contact
                </NavLink> 
            </div>

            <article class="content px-4">
                @Body
            </article>
        </main> *@
		<link rel="stylesheet" href="html5up-dimension/assets/css/main.css" />
		<noscript><link rel="stylesheet" href="html5up-dimension/assets/css/noscript.css" /></noscript>

		<main class="is-preload">

			<!-- Wrapper -->
			<div id="wrapper">

				<!-- Header -->
				<header id="header">
                    <div class="logo d-flex flex-column justify-content-center align-items-center" style="background-color:#8369cd;">
                      @* <span class="icon fa-gem"></span>*@
                        <span class="d-flex flex-column justify-content-center align-items-center">
                            <img src="css/Images/Default/aymlogo.png" class="img-fluid" />
                        </span>

					</div>
                    <nav>
                        <ul>
                            <li><NavLink href="/">Home</NavLink></li>
                            <li><NavLink href="login">login</NavLink></li>
                            <li><NavLink href="register">Register</NavLink></li>
                            <li><NavLink href="contactUs">Contact</NavLink></li>
                        </ul>
                    </nav>
					<div class="content">
						<div class="inner">
							@Body
						</div>
					</div>

				</header>

				<!-- Main -->

                <div class="container text-center mh-100 mb-2">
                </div>

				<!-- Footer -->
				<footer id="footer">
                    <p class="copyright">&copy; Developed by: <a href="https://facebook.com/SalmaSoftOfficial/">SalmaSoft</a>.</p>
				</footer>

			</div>

			<!-- BG -->
			<div id="bg"></div>

			<!-- Scripts -->
@* 			<script src="html5up-dimension/assets/js/jquery.min.js"></script>
 *@			<script src="html5up-dimension/assets/js/browser.min.js"></script>
			<script src="html5up-dimension/assets/js/breakpoints.min.js"></script>
			<script src="html5up-dimension/assets/js/util.js"></script>
			<script src="html5up-dimension/assets/js/main.js"></script>

		</main>

    }





</div>


@code {
    // private int UserUpdateDataCounter = 0;
    // protected bool isAuthenticated;
    public string UserNameLogged = "000";
    private int currentCount = 0;
    private Timer timer;
    // private int TotalCounter = 0;


    private bool isDropdownVisible1 = false;
    private bool isDropdownVisible2 = false;

    private void ToggleDropdown1()
    {
        isDropdownVisible1 = !isDropdownVisible1;
    }
    private void ToggleDropdown2()
    {
        isDropdownVisible2 = !isDropdownVisible2;
    }

    private void NavigateToComponent1()
    {
        isDropdownVisible1 = false;
        isDropdownVisible2 = false;
        Navigation.NavigateTo("/userMessages");
    }
    private void NavigateToComponent2()
    {
        isDropdownVisible1 = false;
        isDropdownVisible2 = false;
        Navigation.NavigateTo("/userLikes");
    }

    private void NavigateToComponent3()
    {
        isDropdownVisible1 = false;
        isDropdownVisible2 = false;
        Navigation.NavigateTo("/userFavorites");
    }

    private void NavigateToComponent4()
    {
        isDropdownVisible1 = false;
        isDropdownVisible2 = false;
        Navigation.NavigateTo("/userViews");
    }
    private void NavigateToComponent5()
    {
        isDropdownVisible1 = false;
        isDropdownVisible2 = false;
        Navigation.NavigateTo("/userBlocks");
    }

    private void NavigateToComponent6()
    {
        isDropdownVisible1 = false;
        isDropdownVisible2 = false;
        Navigation.NavigateTo("/userMatch");
    }
    private void NavigateToComponent7()
    {
        isDropdownVisible1 = false;
        isDropdownVisible2 = false;
        Navigation.NavigateTo("/userSearch");
    }

    private void NavigateToComponent8()
    {
        isDropdownVisible1 = false;
        isDropdownVisible2 = false;
        Navigation.NavigateTo("/userOnline");
    }

    protected async Task ShowAlert(string message)
    {
        await JsInterop.ShowAlert(message);
    }

    protected override async Task OnInitializedAsync()
    {
        if (_AppState.CurrentUserHistoryDTO != null)
        {
            UserNameLogged = _AppState.CurrentUserHistoryDTO.AppUser.UserName;
        }

    }

    private void Callback(object state)
    {
        // Invoke the function that needs to be run every 10 seconds
        if (_AppState.CurrentUserHistoryDTO != null)
        {
            try
            {
                _AppState.AllUsers = _apiServiceLogin.GetUserHistoriesWithMainImagesForAll().Result;
                _AppState.CurrentUserHistoryDTO = _apiServiceLogin.GetHistoryWithMainImagesForCurrentUser().Result;
            }
            catch (Exception ex)
            {

            }
            // StateHasChanged();
            // ShowAlert("You Already Liked before!");
        }

        IncrementCounter();
    }

    // protected void UpdateCurrentUserAppStart()
    // {
    //     _AppState.CurrentUserHistoryDTO = _apiServiceLogin.GetHistoryWithMainImagesForCurrentUser().Result;
    // }

    private void IncrementCounter()
    {
        // Update the counter
        currentCount++;

        // Trigger UI update
        InvokeAsync(StateHasChanged);
    }

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            timer = new Timer(Callback, null, 0, 30000); // Execute every 10 seconds
            // _AppState.AllUsers = await _apiServiceLogin.GetHistoryWithMainImagesForAll();
            StateHasChanged();
        }

    }

}
