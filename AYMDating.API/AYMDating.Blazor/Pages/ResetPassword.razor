@page "/resetPassword/{Email?}/{Code?}"

@inherits Login
@using AYMDating.API.DTO
@using AYMDating.Blazor.Data.Helpers
@using AYMDating.DAL.Entities
@using System.Net.Http.Headers
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject ApiServiceLogin _apiServiceLogin


<PageTitle>Reset Password</PageTitle>

<style>
    :root {
        --primary-color: #6c5ce7;
        --primary-hover: #5649d2;
        --error-color: #ff4757;
        --success-color: #2ed573;
        --light-color: #f8f9fa;
        --dark-color: #343a40;
        --border-radius: 10px;
        --box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        --transition: all 0.3s ease;
    }

    .reset-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        background: linear-gradient(135deg, #f5f7fa 0%, #e4e8f0 100%);
        padding: 2rem;
    }

    .reset-card {
        width: 100%;
        max-width: 500px;
        padding: 2.5rem;
        background: white;
        border-radius: var(--border-radius);
        box-shadow: var(--box-shadow);
        position: relative;
        overflow: hidden;
    }

        .reset-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
            background: linear-gradient(90deg, var(--primary-color), var(--primary-hover));
        }

    .reset-header {
        text-align: center;
        margin-bottom: 2rem;
    }

    .reset-icon {
        color: var(--primary-color);
        font-size: 2.5rem;
        margin-bottom: 1rem;
    }

    .reset-title {
        font-size: 1.8rem;
        font-weight: 600;
        color: var(--dark-color);
        margin-bottom: 0.5rem;
    }

    .reset-subtitle {
        color: #6c757d;
        font-size: 1rem;
    }

    .reset-form {
        width: 100%;
    }

    .form-group {
        margin-bottom: 1.5rem;
        position: relative;
    }

    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: var(--dark-color);
    }

    .form-control {
        width: 100%;
        padding: 0.75rem 1rem;
        border: 1px solid #e9ecef;
        border-radius: var(--border-radius);
        font-size: 1rem;
        transition: var(--transition);
    }

        .form-control:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 0 3px rgba(108, 92, 231, 0.2);
        }

    .password-strength {
        height: 4px;
        background: #e9ecef;
        border-radius: 2px;
        margin-top: 0.5rem;
        overflow: hidden;
    }

    .strength-meter {
        height: 100%;
        width: 0%;
        transition: var(--transition);
    }

    .password-requirements {
        margin-top: 0.5rem;
        font-size: 0.8rem;
        color: #6c757d;
    }

    .requirement {
        display: flex;
        align-items: center;
        margin-bottom: 0.25rem;
    }

        .requirement i {
            margin-right: 0.5rem;
            font-size: 0.6rem;
        }

        .requirement.valid {
            color: var(--success-color);
        }

    .toggle-password {
        position: absolute;
        right: 10px;
        top: 38px;
        background: none;
        border: none;
        color: #6c757d;
        cursor: pointer;
    }

    .reset-btn {
        width: 100%;
        padding: 0.75rem;
        background: var(--primary-color);
        color: white;
        border: none;
        border-radius: var(--border-radius);
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
        margin-top: 1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }

        .reset-btn:hover {
            background: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(108, 92, 231, 0.3);
        }

        .reset-btn:active {
            transform: translateY(0);
        }

    .validation-message {
        color: var(--error-color);
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }

    .validation-summary {
        color: var(--error-color);
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: var(--border-radius);
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .footer-link {
        text-align: center;
        margin-top: 1.5rem;
        color: #6c757d;
    }

        .footer-link a {
            color: var(--primary-color);
            text-decoration: none;
            font-weight: 500;
        }

    @@media (max-width: 576px) {
        .reset-card {
            padding: 1.5rem;
        }

        .reset-title {
            font-size: 1.5rem;
        }
    }

    .validation-message {
        color: var(--error-color);
        font-size: 0.8rem;
        margin-top: 0.25rem;
    }

    .validation-summary {
        color: var(--error-color);
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: var(--border-radius);
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .captcha-container {
        padding: 1.5rem;
        border: 1px solid #e9ecef;
        border-radius: var(--border-radius);
        margin: 1.5rem 0;
        text-align: center;
        background-color: #f8f9fa;
    }

    .captcha-title {
        font-weight: 500;
        margin-bottom: 1rem;
        color: var(--dark-color);
    }

    .captcha-problem {
        font-size: 1.2rem;
        font-weight: 600;
        margin: 1rem 0;
        color: var(--primary-color);
    }

    .captcha-input {
        width: 100%;
        max-width: 200px;
        padding: 0.75rem;
        border: 1px solid #e9ecef;
        border-radius: var(--border-radius);
        text-align: center;
        font-size: 1rem;
        margin: 0.5rem 0;
    }

    .verify-btn {
        padding: 0.5rem 1.5rem;
        background: var(--primary-color);
        color: white;
        border: none;
        border-radius: var(--border-radius);
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
    }

        .verify-btn:hover {
            background: var(--primary-hover);
        }

    .success-message {
        color: var(--success-color);
        font-weight: 500;
        text-align: center;
        margin: 1rem 0;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
    }
</style>

<div class="reset-container">
    <div class="reset-card">
        <div class="reset-header">
            <div class="reset-icon">
                <i class="fas fa-key"></i>
            </div>
            <h1 class="reset-title">Reset Your Password</h1>
            <p class="reset-subtitle">Enter your details to create a new password</p>
        </div>

        <EditForm Model="activationModel" OnValidSubmit="HandleActivation" class="reset-form">
            <DataAnnotationsValidator />
            <ValidationSummary class="validation-summary" />

            <div class="form-group">
                <label for="Email" class="form-label">Email Address</label>
                <InputText id="Email" @bind-Value="activationModel.Email" class="form-control"
                           placeholder="your@email.com" />
                <ValidationMessage For="@(() => activationModel.Email)" class="validation-message" />
            </div>

            <div class="form-group">
                <label for="Code" class="form-label">Verification Code <span class="text-danger">*</span></label>
                <InputText id="Code" @bind-Value="activationModel.Code" class="form-control"
                           placeholder="Enter 6-digit code" required />
                <ValidationMessage For="@(() => activationModel.Code)" class="text-danger" />
            </div>

            <div class="form-group">
                <label for="Password" class="form-label">New Password</label>
                <div style="position: relative;">
                    <InputText id="Password" @bind-Value="activationModel.Password" class="form-control"
                               type="@(showPassword ? "text" : "password")"
                               placeholder="Create new password" />

                </div>
                <ValidationMessage For="@(() => activationModel.Password)" class="validation-message" />
            </div>

            <div class="form-group">
                <label for="ConfirmPassword" class="form-label">Confirm New Password</label>
                <InputText id="ConfirmPassword" @bind-Value="activationModel.ConfirmPassword" class="form-control"
                           type="@(showConfirmPassword ? "text" : "password")"
                           placeholder="Confirm new password" />
                <ValidationMessage For="@(() => activationModel.ConfirmPassword)" class="validation-message" />
            </div>
            @if (_isHuman)
            {
                <div class="success-message">
                    <i class="fas fa-check-circle"></i> Verification complete!
                </div>
            }
            else
            {
                <div class="captcha-container">
                    <p class="captcha-title">Please verify you're not a robot</p>
                    <p class="captcha-problem">@_num1 + @_num2 = ?</p>
                    <input @bind="_userAnswer" class="captcha-input" placeholder="Your answer" type="number" />
                    <button type="button" class="verify-btn" @onclick="VerifyCaptcha">
                        <i class="fas fa-check"></i> Verify
                    </button>
                </div>
            }
            <button type="submit" class="reset-btn" disabled="@(!_isHuman)">
                <i class="fas fa-paper-plane"></i> Reset Password
            </button>
        </EditForm>

        <div class="footer-link">
            Remember your password? <a href="/login">Sign in</a>
        </div>
    </div>
</div>

@code {

    [Parameter]
    [Required]
    [EmailAddress]
    public string? Email { get; set; }

    [Parameter]
    [MinLength(10)]
    [MaxLength(10)]
    public string? Code { get; set; }


    private ForgotPasswordDTO activationModel = new ForgotPasswordDTO();

    private bool showPassword = false;
    private bool showConfirmPassword = false;

    private int _num1;
    private int _num2;
    private string _userAnswer;
    private bool _isHuman;

    protected override void OnInitialized()
    {
        GenerateCaptcha();
    }


    private void GenerateCaptcha()
    {
        var random = new Random();
        _num1 = random.Next(1, 10);
        _num2 = random.Next(1, 10);
    }

    private void VerifyCaptcha()
    {
        int correctAnswer = _num1 + _num2;
        _isHuman = _userAnswer == correctAnswer.ToString();
    }

    private async Task HandleActivation()
    {
        try
        {
            activationModel.Code = Code;
            activationModel.Email = Email;
            bool ActivateUserIsDone = await _apiServiceLogin.ResetPasswordForUser(activationModel);
            if (ActivateUserIsDone)
            {
                Navigation.NavigateTo("/login/Congratulation, Your Password was changed!.");
            }
            await ShowAlert("Error, Incorrect Data!");

        }
        catch (Exception ex)
        {
            // Handle login failure (e.g., show an error message)
        }
    }

    protected override async Task OnInitializedAsync()
    {
        activationModel.Email = Email;
        activationModel.Code = Code;

    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

    }
}
