@page "/activateAcAgain"

@inherits Login
@using AYMDating.API.DTO
@using AYMDating.Blazor.Data.Helpers
@using AYMDating.DAL.Entities
@using System.Net.Http.Headers
@using System.ComponentModel.DataAnnotations
@inject NavigationManager Navigation
@inject ApiServiceLogin _apiServiceLogin



 <PageTitle>Activate Account +1</PageTitle>

<div class="activation-container">
    <div class="activation-card">
        <div class="activation-header">
            <h2><i class="bi bi-shield-lock"></i> Account Activation</h2>
            <p class="text-muted">Enter your email to receive a new activation code</p>
        </div>

        <div class="activation-body">
            <EditForm Model="activationModel" OnValidSubmit="HandleActivation">
                <DataAnnotationsValidator />
                <ValidationSummary class="validation-summary" />

                <div class="form-group-wide">
                    <label for="Email">Email Address</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="bi bi-envelope"></i></span>
                        <InputText id="Email" @bind-Value="activationModel.Email" type="email"
                                   class="form-control-lg" placeholder="your.email@example.com" />
                    </div>
                </div>
                @if (_isHuman)
                {
                    <div class="verification-success">
                        <i class="bi bi-check-circle-fill"></i>
                        <span>Verification complete! You may proceed.</span>
                    </div>
                }
                else
                {
                    <div class="human-verification">
                        <div class="verification-header">
                            <i class="bi bi-robot"></i>
                            <h4>Human Verification</h4>
                        </div>
                        <p>Please solve this simple math problem to continue:</p>

                        <div class="math-problem">
                            <span>@_num1 + @_num2 =</span>
                            <input @bind="_userAnswer" placeholder="?"
                                   class="math-answer" type="number" />
                        </div>

                        <button class="btn-verify" @onclick="VerifyCaptcha">
                            <i class="bi bi-shield-check"></i> Verify
                        </button>
                    </div>
                }
                <button class="btn-activate" type="submit">
                    <i class="bi bi-send-check"></i> Send Activation Code
                </button>
            </EditForm>


        </div>

        <div class="activation-footer">
            <p>Need help? <a href="/contactUs">Contact support</a></p>
        </div>
    </div>
</div>

<style>
    /* Wide layout for the page */
    .wide-layout {
        max-width: 1200px;
        margin: 0 auto;
    }

    /* Main container styling */
    .activation-container {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 80vh;
        padding: 2rem;
        background: linear-gradient(135deg, #f5f7fa 0%, #e4e8eb 100%);
    }

    /* Card styling */
    .activation-card {
        width: 800px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        overflow: hidden;
    }

    /* Header section */
    .activation-header {
        padding: 2rem;
        background: linear-gradient(135deg, #4b6cb7 0%, #182848 100%);
        color: white;
        text-align: center;
    }

        .activation-header h2 {
            margin: 0;
            font-weight: 600;
        }

        .activation-header i {
            margin-right: 10px;
        }

    /* Body section */
    .activation-body {
        padding: 2.5rem;
    }

    /* Form styling */
    .form-group-wide {
        margin-bottom: 1.5rem;
    }

        .form-group-wide label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: #495057;
        }

    .input-group {
        margin-bottom: 0.5rem;
    }

    .input-group-text {
        background-color: #f8f9fa;
    }

    .form-control-lg {
        padding: 1rem;
        font-size: 1.1rem;
    }

    /* Button styling */
    .btn-activate {
        width: 100%;
        padding: 1rem;
        background: linear-gradient(135deg, #4b6cb7 0%, #182848 100%);
        color: white;
        border: none;
        border-radius: 6px;
        font-size: 1.1rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        margin-top: 1rem;
    }

        .btn-activate:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(75, 108, 183, 0.4);
        }

        .btn-activate i {
            margin-right: 8px;
        }

    /* Verification section */
    .human-verification {
        margin-top: 2rem;
        padding: 1.5rem;
        background: #f8f9fa;
        border-radius: 8px;
        border-left: 4px solid #4b6cb7;
    }

    .verification-header {
        display: flex;
        align-items: center;
        margin-bottom: 1rem;
    }

        .verification-header h4 {
            margin: 0 0 0 10px;
            color: #495057;
        }

        .verification-header i {
            font-size: 1.5rem;
            color: #4b6cb7;
        }

    .math-problem {
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 1.5rem 0;
        font-size: 1.5rem;
        font-weight: 500;
    }

        .math-problem span {
            margin-right: 1rem;
        }

    .math-answer {
        width: 100px;
        padding: 0.5rem;
        font-size: 1.2rem;
        text-align: center;
        border: 2px solid #dee2e6;
        border-radius: 4px;
    }

    .btn-verify {
        width: 100%;
        padding: 0.75rem;
        background: #4b6cb7;
        color: white;
        border: none;
        border-radius: 6px;
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }

        .btn-verify:hover {
            background: #3a5aa0;
        }

        .btn-verify i {
            margin-right: 8px;
        }

    /* Success message */
    .verification-success {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-top: 1.5rem;
        padding: 1rem;
        background: #d4edda;
        color: #155724;
        border-radius: 6px;
    }

        .verification-success i {
            margin-right: 10px;
            font-size: 1.2rem;
        }

    /* Footer */
    .activation-footer {
        padding: 1.5rem;
        text-align: center;
        background: #f8f9fa;
        border-top: 1px solid #e9ecef;
    }

        .activation-footer a {
            color: #4b6cb7;
            text-decoration: none;
            font-weight: 500;
        }

    /* Validation */
    .validation-summary {
        padding: 1rem;
        margin-bottom: 1.5rem;
        background: #f8d7da;
        color: #721c24;
        border-radius: 6px;
        list-style-type: none;
    }
</style>


@code {
    private ActivateUserDTO activationModel = new ActivateUserDTO();

    private int _num1;
    private int _num2;
    private string _userAnswer;
    private bool _isHuman;

    protected override void OnInitialized()
    {
        GenerateCaptcha();
    }

    private void GenerateCaptcha()
    {
        var random = new Random();
        _num1 = random.Next(1, 10);
        _num2 = random.Next(1, 10);
    }

    private void VerifyCaptcha()
    {
        int correctAnswer = _num1 + _num2;
        _isHuman = _userAnswer == correctAnswer.ToString();
    }


    private async Task HandleActivation()
    {
        try
        {
            if (_isHuman)
            {
                ActivateUserDTO CreatedUser = await _apiServiceLogin.ActivateAgainForUser(activationModel.Email);
                if (CreatedUser.Email != null)
                {
                    Navigation.NavigateTo($"/activateAccount/{CreatedUser.Email}/{""}");
                }
                await ShowAlert("There is No Account Is Match!.");
            }
                else
                await ShowAlert("Wrong Captcha");
        }
        catch (Exception ex)
        {
            // Handle login failure (e.g., show an error message)
        }
    }

    protected override async Task OnInitializedAsync()
    {

    }


    protected async override Task OnAfterRenderAsync(bool firstRender)
    {

    }
}
