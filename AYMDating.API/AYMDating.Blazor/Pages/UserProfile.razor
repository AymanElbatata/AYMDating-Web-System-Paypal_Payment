@page "/userProfile"
@inherits Users

@using AYMDating.API.Helpers
@using Microsoft.AspNetCore.Components.Forms
@using AYMDating.API.DTO
@using AYMDating.Blazor.Data.Helpers
@using AYMDating.DAL.Entities
@using System.Drawing
@inject NavigationManager Navigation
@inject ApiServiceLogin _apiServiceLogin
@inject AppState _AppState

<PageTitle>Profile</PageTitle>

<style>


    input[type="file"].d-none {
        display: none;
    }

    .custom-file-upload {
        cursor: pointer;
        display: inline-block;
    }

    .custom-file-upload:hover {
         background-color: gray; /* Optional: Change background on hover */
    }

    .textarea-custom {
        width: 100%;
        height: 200px; /* Adjust height as needed */
    }
</style>
@if (_AppState.isAuthenticated)
{
<div class="m-auto text-center">
    <h4>Profile</h4>
    <br />
</div>

    @if (userHistory == null || Countries == null || Jobs == null)
{
    <p><em>Loading...</em></p>
}
else
{    <div class="container">
        <div class="row">
            <div class="col-md-5 text-cener rounded p-1 mb-3">
                    <div class="d-flex row p-1">
                        <label class="custom-file-upload btn btn-outline-secondary m-1">
                        <InputFile class="d-none" OnChange="HandleSelected" MaxFileSize="307200" />
                        <img src="@GetUserImage(userHistory.MainImage)" alt="Image" class="img-fluid photo-box rounded" />
                    </label>
                    <button class="btn btn-outline-secondary" @onclick="() => UploadFile(5)">Upload</button>
                </div>
                <div class="d-flex row p-1">
                    <div class="col-md-3 rounded d-flex align-items-center flex-column">
                        <label class="custom-file-upload btn btn-outline-secondary photo-box2">
                            <InputFile class="d-none" OnChange="HandleSelected" MaxFileSize="307200" />
                            <img src="@GetUserImageOrdered(1)" title="@userHistory.AppUser.UserName- 1" class="img-fluid rounded" />
                        </label>
                        <button class="btn btn-outline-secondary mt-1" @onclick="() => UploadFile(1)">Upload</button>
                    </div>
                    <div class="col-md-3 rounded d-flex align-items-center flex-column">
                        <label class="custom-file-upload btn btn-outline-secondary photo-box2">
                            <InputFile class="d-none" OnChange="HandleSelected" MaxFileSize="307200" />
                            <img src="@GetUserImageOrdered(2)" title="@userHistory.AppUser.UserName- 2" class="img-fluid rounded"  />
                        </label>
                        <button class="btn btn-outline-secondary mt-1" @onclick="() => UploadFile(2)">Upload</button>
                    </div>
                    <div class="col-md-3 rounded d-flex align-items-center flex-column">
                        <label class="custom-file-upload btn btn-outline-secondary photo-box2">
                            <InputFile class="d-none" OnChange="HandleSelected" MaxFileSize="307200" />
                            <img src="@GetUserImageOrdered(3)" title="@userHistory.AppUser.UserName- 3" class="img-fluid rounded"  />
                        </label>
                        <button class="btn btn-outline-secondary mt-1" @onclick="() => UploadFile(3)">Upload</button>
                    </div>
                    <div class="col-md-3 rounded d-flex align-items-center flex-column">
                        <label class="custom-file-upload btn btn-outline-secondary photo-box2">
                            <InputFile class="d-none" OnChange="HandleSelected" MaxFileSize="307200" />
                            <img src="@GetUserImageOrdered(4)" title="@userHistory.AppUser.UserName- 4" class="img-fluid rounded" />
                        </label>
                        <button class="btn btn-outline-secondary mt-1" @onclick="() => UploadFile(4)">Upload</button>
                    </div>
                </div>
            </div>

            <div class="col-md-7 text-center rounded px-4 mb-3">
                <div class="d-flex align-items-center">
                        <EditForm Model="userHistory" OnValidSubmit="HandleuserHistoryUpdate" class="m-auto w-100">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-control">
                                <img src="@GetpackageImage((int)userHistory.UserPackage.PackageId)" title="@userHistory.UserPackage.Package.Name" class="img-fluid" style="max-width: 10%;" /> @(userHistory.UserPackage.PackageId != 1 ? $" Until: {userHistory.UserPackage.PackageEndDate.Day}/{userHistory.UserPackage.PackageEndDate.Month}/{userHistory.UserPackage.PackageEndDate.Year}" : "")
                            </div>
                        <div class="form-control">
                            <label for="userHistory.AgeTo">Profile Heading:</label>
                                <InputText id="userHistory.ProfileHeading" @bind-Value="userHistory.ProfileHeading" maxlength="75" class="w-75" />
                        </div>
                        <div class="form-control">
                            <label for="userHistory.SearchAgeFrom">Age From:</label>
                                <InputNumber id="userHistory.AgeFrom" @bind-Value="userHistory.SearchAgeFrom" class="w-75" />
                        </div>
                        <div class="form-control">
                            <label for="userHistory.SearchAgeTo">Age To:</label>
                                <InputNumber id="userHistory.AgeTo" @bind-Value="userHistory.SearchAgeTo" class="w-75" />
                        </div>
                        <div class="form-control">
                            <label for="userHistory.CountryId">Country:</label>
                            <InputSelect id="userHistory.CountryId" @bind-Value="userHistory.CountryId" class="w-75" >
                                @foreach (var item in Countries)
                                {
                                    <option value="@item.ID">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-control">
                            <label for="userHistory.City">City:</label>
                                <InputText id="userHistory.City" @bind-Value="userHistory.City" class="w-75" />
                        </div>
                        <div class="form-control">
                            <label for="countryDropdown">Gender:</label>
                                <InputSelect id="countryDropdown" @bind-Value="userHistory.GenderId" class="w-75">
                                @foreach (var item in Genders)
                                {
                                    <option value="@item.ID">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-control">
                            <label for="userHistory.MaritalStatusId">Marital Status:</label>
                                <InputSelect id="userHistory.MaritalStatusId" @bind-Value="userHistory.MaritalStatusId" class="w-75">
                                @foreach (var item in MaritalStatuses)
                                {
                                    <option value="@item.ID">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-control">
                            <label for="userHistory.LanguageId">Language:</label>
                                <InputSelect id="userHistory.LanguageId" @bind-Value="userHistory.LanguageId" class="w-75">
                                @foreach (var item in Languages)
                                {
                                    <option value="@item.ID">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-control">
                            <label for="userHistory.EducationId">Education:</label>
                                <InputSelect id="userHistory.EducationId" @bind-Value="userHistory.EducationId" class="w-75">
                                @foreach (var item in Educations)
                                {
                                    <option value="@item.ID">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-control">
                            <label for="userHistory.JobId">Job:</label>
                                <InputSelect id="userHistory.JobId" @bind-Value="userHistory.JobId" class="w-75">
                                @foreach (var item in Jobs)
                                {
                                    <option value="@item.ID">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-control">
                            <label for="userHistory.PurposeId">Purpose:</label>
                                <InputSelect id="userHistory.PurposeId" @bind-Value="userHistory.PurposeId" class="w-75">
                                @foreach (var item in Purposes)
                                {
                                    <option value="@item.ID">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-control">
                            <label for="userHistory.FinancialModeId">Financial Mode:</label>
                                <InputSelect id="userHistory.FinancialModeId" @bind-Value="userHistory.FinancialModeId" class="w-75">
                                @foreach (var item in FinancialModes)
                                {
                                    <option value="@item.ID">@item.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <div class="form-control">
                            <label for="userHistory.AboutYou">About You:</label>
                            <InputTextArea id="userHistory.AboutYou" @bind-Value="userHistory.AboutYou" class="textarea-custom" maxlength="900" />
                        </div>
                        <div class="form-control">
                            <label for="userHistory.AboutPartner">About Partner:</label>
                            <InputTextArea id="userHistory.AboutPartner" @bind-Value="userHistory.AboutPartner" class="textarea-custom" maxlength="900" />
                        </div>
                        <br />
                        <button class="btn btn-outline-secondary rounded mb-3" type="submit">Save</button>
                    </EditForm>
                </div>
            </div>
        </div>

      </div>
 }
}
else
    UnAuthorizedUser();

@code {

    long maxFileSize = 300 * 1024; // 300 KB in bytes

    protected string GetUserImageOrdered(int order)
    {
        var Image = userHistory.OtherImages.Where(a => a.Order == order).FirstOrDefault();
        if (Image != null)
        {
            // return "UserImages/" + Image.LinkName.Replace("https://localhost:7082/", "");
            return UserImagesUrlSpecs.UrlUserImagestoRead + Image.LinkName.Replace("https://aymdate.runasp.net/", "");
        }
        return "css/Images/Default/user-icon-2400.png";
    }

    private IBrowserFile selectedFile;

    private void HandleSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        if (selectedFile != null)
        {
            if (selectedFile != null && selectedFile.Size > maxFileSize)
            {
                ShowAlert("File size exceeds the maximum allowed size of 300 KB!");
            }
            else
            {
                // Display a preview of the photo before uploading
                using var stream = selectedFile.OpenReadStream();
                var buffer = new byte[selectedFile.Size];
                stream.ReadAsync(buffer);
            }
        }



    }
    private async Task UploadFile(int type)
    {
        try
        {
            if (selectedFile != null)
            {

                if (selectedFile != null && selectedFile.Size > maxFileSize)
                {
                    await ShowAlert("File size exceeds the maximum allowed size of 300 KB!");

                }

                var formFile = new BrowserFileWrapper(selectedFile);

                var content = new MultipartFormDataContent();
                var fileStream = formFile.OpenReadStream(); // Max 10MB
                var fileContent = new StreamContent(fileStream);
                fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(formFile.ContentType);
                content.Add(fileContent, "file", formFile.Name);


                if (type == 5)
                {
                    var Result = await _apiServiceLogin.SendUploadUserMainImageForCurrentUser(content);
                }
                else
                {
                    var Result = await _apiServiceLogin.SendUploadUserOtherImageForCurrentUser(content, type);
                }
                selectedFile = null;
                userHistory = await _apiServiceLogin.GetUserHistoryWithFullImagesByUserId(_AppState.CurrentUserHistoryDTO.AppUserId);
                StateHasChanged();
            }
            else
                await ShowAlert("Please Select Image!");
        }

        catch (Exception)
        {
            await ShowAlert("Error, Please Try Again!");
        }
        
    }


    private UserHistoryDTO userHistory;
    private IReadOnlyList<Country> Countries;
    private IReadOnlyList<Gender> Genders;
    private IReadOnlyList<Job> Jobs;
    private IReadOnlyList<Education> Educations;
    private IReadOnlyList<Purpose> Purposes;
    private IReadOnlyList<FinancialMode> FinancialModes;
    private IReadOnlyList<Language> Languages;
    private IReadOnlyList<MaritalStatus> MaritalStatuses;

    private async Task HandleuserHistoryUpdate()
    {
        try
        {

            var UpdateUserHistory = await _apiServiceLogin.SendUpdateHistoryWithMainImagesForCurrentUser(userHistory);

            if (UpdateUserHistory)
            {
                // await ShowAlert("Update is Done!");
                StateHasChanged();
            }


        }
        catch (Exception ex)
        {
            // Handle login failure (e.g., show an error message)
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var AllLookUps = await _apiServiceLogin.GetAllLookUpTablesForUserProfile();

            Countries = AllLookUps.AllCountries;
            Genders = AllLookUps.AllGenders;
            Educations = AllLookUps.AllEducations;
            MaritalStatuses = AllLookUps.AllMaritalStatuses;
            FinancialModes = AllLookUps.AllFinancialModes;
            Jobs = AllLookUps.AllJobs;
            Languages = AllLookUps.AllLanguages;
            Purposes = AllLookUps.AllPurposes;
            try
            {
                if (_AppState.CurrentUserHistoryDTO.AppUserId != null)
                {
                    userHistory = await _apiServiceLogin.GetUserHistoryWithFullImagesByUserId(_AppState.CurrentUserHistoryDTO.AppUserId);
                }
            }
            catch (Exception e)
            {
;
            }

        }
        catch (Exception ex)
        {
            GoToWrongArea();
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {


    }
}
